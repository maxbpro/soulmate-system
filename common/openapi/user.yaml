openapi: 3.0.0
info:
  title: Profile API
  description: REST API для взаимодействия с Profile сервисом.
  version: 1.0.0
servers:
  - url: http://localhost:8082

paths:
  /v1/profiles:
    post:
      summary: Регистрация профиля пользователя
      operationId: "registration"
      tags:
        - Profile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image_file:
                  type: string
                  format: binary
                  description: image to get face landmarks
                profileRequestDto:
                  $ref: '#/components/schemas/ProfileRegistrationRequestDto'
              required:
                - image_file
            encoding:
              profileRequestDto:
                contentType: application/json




      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'

  /v1/profiles/{id}:
    get:
      summary: Get profile by id
      operationId: "findById"
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
          '201':
            description: Successfully found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProfileDto'
    put:
      summary: Update profile
      operationId: "update"
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRegistrationRequestDto'
      responses:
        '201':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
    delete:
      summary: soft delete profile by id
      operationId: "delete"
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully deleted

  /v1/profiles/compensate-registration/{id}:
    delete:
      summary: compensate-registration, hard delete profile by id
      operationId: "compensateRegistration"
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully deleted
  /v1/profiles/{id}/upload:
    post:
      summary: upload photos for users
      operationId: "uploadImage"
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image file to upload
              required:
                - image
      responses:
        '200':
          description: File uploaded successfully



components:
  schemas:

    ProfileDto:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        birthDate:
          type: string
          format: date
          example: "2017-01-01"
        interestedIn:
          type: string
        ageMin:
          type: integer
        ageMax:
          type: integer
        radius:
          type: integer

    ProfileRegistrationRequestDto:
      type: object
      required: [
        firstName,
        phoneNumber,
      ]
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        birthDate:
          type: string
          format: date
          example: "2017-01-01"
        interestedIn:
          type: string
          enum:
            - male
            - female
        ageMin:
          type: integer
          minimum: 18
          maximum: 99
        ageMax:
          type: integer
          minimum: 19
          maximum: 99
        radius:
          type: integer
          minimum: 1
          maximum: 100


