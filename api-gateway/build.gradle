plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"
        mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.20.1")
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.register('printEnvVars') {
    doLast {
        println "GITHUB_ACTOR: ${System.getenv('GITHUB_ACTOR')}"
        println "PERSONAL_ACCESS_TOKEN: ${System.getenv('PERSONAL_ACCESS_TOKEN')}"
    }
}

repositories {
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/maxbpro/soulmate-system")
        credentials {
            username = System.getenv("GITHUB_ACTOR") ?: project.properties["gpr.user"]
            password = System.getenv("PERSONAL_ACCESS_TOKEN") ?: project.properties["gpr.key"]
        }
    }
}

dependencies {
    implementation 'ru.maxb.soulmate.common:common:1.0.0'

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.keycloak:keycloak-admin-client:$keycloakAdminClientVersion")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocOpenapiStarterWebfluxUiVersion}")
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudStarterOpenFeignVersion}"
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jSpringBoot3Version}"

    implementation("io.opentelemetry:opentelemetry-exporter-otlp")

    implementation "io.github.openfeign:feign-okhttp:${feignOkhttpVersion}"
    implementation "io.github.openfeign:feign-jackson:${feignJacksonVersion}"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"

    compileOnly("org.projectlombok:lombok")
    compileOnly("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")


    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}


test {
    useJUnitPlatform()
    include '**/*'
}
